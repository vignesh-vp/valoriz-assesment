pipeline {
    agent any

    environment {
        VERSION = "v1.0.${BUILD_NUMBER}"  // Generates a versioned tag like v1.0.5
        IMAGE_NAME = "vgnsh/django-backend"
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/vignesh-vp/valoriz-assesment.git'
            }
        }

        stage('Install Docker') {
            steps {
                script {
                    sh '''
                    if ! command -v docker &> /dev/null; then
                        echo "Installing Docker..."
                        apt-get update
                        apt-get install -y docker.io
                    else
                        echo "Docker is already installed."
                    fi
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker --version'
                    sh '''
                    docker build -t ${IMAGE_NAME}:${VERSION} -f Dockerfile.backend .
                    docker tag ${IMAGE_NAME}:${VERSION} ${IMAGE_NAME}:latest
                    '''
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                withCredentials([string(credentialsId: 'docker-hub-password', variable: 'DOCKER_PASSWORD')]) {
                    script {
                        sh 'echo "$DOCKER_PASSWORD" | docker login -u vgnsh --password-stdin'
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    sh '''
                    docker push ${IMAGE_NAME}:${VERSION}
                    # docker push ${IMAGE_NAME}:latest
                    '''
                }
            }
        }

        stage('Install Kubectl') {
            steps {
                script {
                    sh '''
                    if ! command -v kubectl &> /dev/null; then
                        echo "Installing kubectl..."
                        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                        chmod +x kubectl
                        mv kubectl /usr/local/bin/
                    else
                        echo "kubectl is already installed."
                    fi
                    '''
                }
            }
        }

        stage('Deploy to Local K3s') {
            steps {
                script {
                    sh '''
                    kubectl --server=https://kubernetes.default.svc set image deployment/django-backend django-backend=vgnsh/django-backend:${VERSION} -n default
                    kubectl --server=https://kubernetes.default.svc rollout restart deployment/django-backend -n default
                    '''
                }
            }
        }

        stage('Deploy to Azure AKS') {
            steps {
                withCredentials([file(credentialsId: 'aks-kubeconfig', variable: 'KUBECONFIG')]) {
                    script {
                        sh '''
                        kubectl --kubeconfig=$KUBECONFIG config use-context app-prod
                        kubectl --kubeconfig=$KUBECONFIG set image deployment/django-backend django-backend=${IMAGE_NAME}:${VERSION} -n default
                        kubectl --kubeconfig=$KUBECONFIG rollout restart deployment/django-backend -n default
                        '''
                    }
                }
            }
        }
    }
}
