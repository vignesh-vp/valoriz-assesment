pipeline {
    agent any

    environment {
        VERSION = "v1.0.${BUILD_NUMBER}"
        IMAGE_NAME = "vgnsh/menu-frontend"
        K8S_NAMESPACE = "jenkins"
        ENV_FILE = ''  // Placeholder for environment file
    }

    parameters {
        choice(name: 'DEPLOY_ENV', choices: ['local', 'cloud'], description: 'Choose deployment environment: local (K3s) or cloud (AKS)')
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/vignesh-vp/valoriz-assesment.git'
            }
        }

        stage('Set Environment File') {
            steps {
                script {
                    env.ENV_FILE = params.DEPLOY_ENV == 'cloud' ? ".env.production" : ".env.local"
                    echo "Using environment file: ${env.ENV_FILE}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('menu-frontend') {  // Change directory to where .env files exist
                    script {
                        sh '''
                        ls -la  # Debugging step to check if .env files exist
                        if [ ! -f ${ENV_FILE} ]; then
                            echo "ERROR: ${ENV_FILE} does not exist!"
                            exit 1
                        fi
                        cp ${ENV_FILE} .env  # Copy correct environment file
                        docker --version
                        docker build -t ${IMAGE_NAME}:${VERSION} -f Dockerfile.frontend .
                        docker tag ${IMAGE_NAME}:${VERSION} ${IMAGE_NAME}:latest
                        '''
                    }
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                withCredentials([string(credentialsId: 'docker-hub-password', variable: 'DOCKER_PASSWORD')]) {
                    script {
                        sh 'echo "$DOCKER_PASSWORD" | docker login -u vgnsh --password-stdin'
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    sh '''
                    docker push ${IMAGE_NAME}:${VERSION}
                    docker push ${IMAGE_NAME}:latest
                    '''
                }
            }
        }

        stage('Deploy to Local K3s') {
            when {
                expression { return params.DEPLOY_ENV == 'local' }
            }
            steps {
                script {
                    sh '''
                    echo "Applying ConfigMap for Local K3s..."
                    kubectl apply -f k8s/nextjs-configmap-local.yaml -n ${K8S_NAMESPACE}

                    echo "Updating deployment..."
                    kubectl set image deployment/menu-frontend menu-frontend=${IMAGE_NAME}:${VERSION} -n ${K8S_NAMESPACE}

                    echo "Restarting deployment..."
                    kubectl rollout restart deployment/menu-frontend -n ${K8S_NAMESPACE}
                    '''
                }
            }
        }

        stage('Deploy to Azure AKS') {
            when {
                expression { return params.DEPLOY_ENV == 'cloud' }
            }
            steps {
                withCredentials([file(credentialsId: 'aks-kubeconfig', variable: 'KUBECONFIG')]) {
                    script {
                        sh '''
                        echo "Applying ConfigMap for AKS..."
                        kubectl --kubeconfig=$KUBECONFIG apply -f k8s/nextjs-configmap-aks.yaml -n ${K8S_NAMESPACE}

                        echo "Updating deployment..."
                        kubectl --kubeconfig=$KUBECONFIG set image deployment/menu-frontend menu-frontend=${IMAGE_NAME}:${VERSION} -n ${K8S_NAMESPACE}

                        echo "Restarting deployment..."
                        kubectl --kubeconfig=$KUBECONFIG rollout restart deployment/menu-frontend -n ${K8S_NAMESPACE}
                        '''
                    }
                }
            }
        }
    }
}
